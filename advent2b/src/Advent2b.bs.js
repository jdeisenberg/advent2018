// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function nDiffs(s1, s2, _pos, _param) {
  while(true) {
    var param = _param;
    var pos = _pos;
    var diffAt = param[1];
    var total = param[0];
    if (pos === s1.length || total > 1) {
      return /* tuple */[
              total,
              diffAt
            ];
    } else {
      var c1 = s1.charAt(pos);
      var c2 = s2.charAt(pos);
      if (c1 !== c2) {
        _param = /* tuple */[
          total + 1 | 0,
          pos
        ];
        _pos = pos + 1 | 0;
        continue ;
      } else {
        _param = /* tuple */[
          total,
          diffAt
        ];
        _pos = pos + 1 | 0;
        continue ;
      }
    }
  };
}

function findOneDiff(data, _pos1, _pos2) {
  while(true) {
    var pos2 = _pos2;
    var pos1 = _pos1;
    var n = data.length;
    if (pos1 === n && pos2 === n) {
      return /* tuple */[
              "",
              "",
              0
            ];
    } else {
      console.log(Caml_array.caml_array_get(data, pos1), Caml_array.caml_array_get(data, pos2));
      var match = nDiffs(Caml_array.caml_array_get(data, pos1), Caml_array.caml_array_get(data, pos2), 0, /* tuple */[
            0,
            0
          ]);
      if (match[0] === 1) {
        return /* tuple */[
                Caml_array.caml_array_get(data, pos1),
                Caml_array.caml_array_get(data, pos2),
                match[1]
              ];
      } else {
        var new2 = pos2 + 1 | 0;
        if (new2 === n) {
          _pos2 = pos1 + 2 | 0;
          _pos1 = pos1 + 1 | 0;
          continue ;
        } else {
          _pos2 = new2;
          continue ;
        }
      }
    }
  };
}

var __x = Fs.readFileSync("input.txt", "utf8").split("\n");

var data = Belt_Array.keep(__x, (function (x) {
        return x !== "";
      }));

console.log(findOneDiff(data, 0, 0));

exports.nDiffs = nDiffs;
exports.findOneDiff = findOneDiff;
exports.data = data;
/* __x Not a pure module */
