// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var cmp = Caml_obj.caml_compare;

var IntComparator = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

function toInt(s) {
  if (s !== "") {
    if (s.charAt(0) === "+") {
      return Caml_format.caml_int_of_string(s.slice(1));
    } else {
      return Caml_format.caml_int_of_string(s);
    }
  } else {
    return 0;
  }
}

function findDuplicate(data, _position, _sums, _total) {
  while(true) {
    var total = _total;
    var sums = _sums;
    var position = _position;
    var n = data.length;
    if (position === 0) {
      console.log("Repeating list " + String(Belt_Map.size(sums)));
    }
    var newTotal = total + Caml_array.caml_array_get(data, position) | 0;
    if (Belt_Map.has(sums, newTotal)) {
      return newTotal;
    } else {
      _total = newTotal;
      _sums = Belt_Map.set(sums, newTotal, 1);
      _position = Caml_int32.mod_(position + 1 | 0, n);
      continue ;
    }
  };
}

var __x = Fs.readFileSync("frequencies.txt", "utf8").split("\n");

var __x$1 = Belt_Array.map(__x, toInt);

var data = Belt_Array.keep(__x$1, (function (x) {
        return x !== 0;
      }));

var result = findDuplicate(data, 0, Belt_Map.make(IntComparator), 0);

console.log("Result", result);

exports.IntComparator = IntComparator;
exports.toInt = toInt;
exports.findDuplicate = findDuplicate;
exports.data = data;
exports.result = result;
/* IntComparator Not a pure module */
