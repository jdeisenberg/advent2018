// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

var cmp = Caml_obj.caml_compare;

var StrComparator = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

function makeMap(_s, m) {
  while(true) {
    var s = _s;
    if (s === "") {
      return m;
    } else {
      var n = s.codePointAt(0);
      if (n !== undefined) {
        Belt_Array.set(m, n - 97 | 0, m[n - 97 | 0] + 1 | 0);
        _s = s.slice(1);
        continue ;
      } else {
        _s = s.slice(1);
        continue ;
      }
    }
  };
}

var __x = Fs.readFileSync("input.txt", "utf8").split("\n");

var data = Belt_Array.keep(__x, (function (x) {
        return x !== "";
      }));

var match = Belt_Array.reduce(data, /* tuple */[
      0,
      0
    ], (function (param, item) {
        var m = makeMap(item, Belt_Array.make(26, 0));
        var match = Belt_Array.some(m, (function (x) {
                return x === 2;
              }));
        var match$1 = Belt_Array.some(m, (function (x) {
                return x === 3;
              }));
        return /* tuple */[
                param[0] + (
                  match ? 1 : 0
                ) | 0,
                param[1] + (
                  match$1 ? 1 : 0
                ) | 0
              ];
      }));

var nThree = match[1];

var nTwo = match[0];

console.log(nTwo, nThree);

console.log(Caml_int32.imul(nTwo, nThree));

exports.StrComparator = StrComparator;
exports.makeMap = makeMap;
exports.data = data;
exports.nTwo = nTwo;
exports.nThree = nThree;
/* StrComparator Not a pure module */
